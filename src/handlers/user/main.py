import asyncio
import logging
import os

from aiogram import Dispatcher, exceptions, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

import createBot
from keyboards.inline import none_age, none_experience, send_resume_question
from keyboards.reply import menu_kb


class FsmSendResume(StatesGroup):
    name = State()
    age = State()
    experience = State()
    finish = State()


async def back_menu(msg: types.Message, state: FSMContext):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb)
    await state.finish()


async def start_resume(msg: types.Message):
    logging.info(f'| {msg.from_user.id} | @{msg.from_user.username} > "{msg.text}"')
    
    await msg.reply("‚ùó–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                    reply_markup=ReplyKeyboardRemove())
    await msg.answer("üìã<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –í–∞—à–µ –∏–º—è </b>\n<em>'—Ñ–∞–º–∏–ª–∏—è –ø–æ –∂–µ–ª–∞–Ω–∏—é'</em>")
    
    await FsmSendResume.name.set()


async def set_name(msg: types.Message, state: FSMContext):
    logging.info(f'| {msg.from_user.id} | @{msg.from_user.username} > "{msg.text}"')
    
    name = msg.text
    async with state.proxy() as data:
        data["name"] = name
    
    await msg.reply(f'üëå–û—Ç–ª–∏—á–Ω–æ, <em>{name}</em>\nüìã–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=none_age)
    
    await FsmSendResume.next()


async def set_age(msg_call: types.Message or types.CallbackQuery, state: FSMContext):
    msg_call = msg_call.message if type(msg_call) is types.CallbackQuery else msg_call
    
    try:
        age = int(msg_call.text)
        if age < 10 or age > 80:
            return await msg_call.reply("‚ùó–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=none_age)
    except Exception:
        age = "-"
    
    async with state.proxy() as data:
        data["age"] = age
    await msg_call.answer("üëå–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å")
    await msg_call.answer("üìã–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∫–∞–∫–æ–π-—Ç–æ –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–¥–∞–∂/–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–æ–≤?\n"
                          "<b>üì£–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –í–∞—à –æ–ø—ã—Ç\n</b>"
                          " <em>'—ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ c –í–∞–º'</em>",
                          reply_markup=none_experience)
    
    await FsmSendResume.next()


async def set_experience(msg_call: types.Message or types.CallbackQuery, state: FSMContext):
    if type(msg_call) is types.CallbackQuery:
        msg_call = msg_call.message if type(msg_call) is types.CallbackQuery else msg_call
        experience = "-"
    else:
        await msg_call.reply("üëå–û—Ç–ª–∏—á–Ω–æ!\n<b>–≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>")
        experience = msg_call.text
    
    async with state.proxy() as data:
        data["experience"] = experience

    await msg_call.answer("üíû–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n"
                          f"üìã–ò–º—è: {data['name']}\nüìã–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\nüìã–û–ø—ã—Ç: {data['experience']}",
                          reply_markup=send_resume_question)
    
    await FsmSendResume.next()


async def finish_state(call: types.CallbackQuery, state: FSMContext):
    logging.info(f'| {call.from_user.id} | @{call.from_user.username} > "{call.data}"')
    
    async with state.proxy() as data:
        pass
    
    callback = (call.data.split("__"))[1]
    if callback == 'send_resume':
        createBot.database.set_info_user(call.from_user.id, data["name"], data['age'], data['experience'])
        await call.message.answer("‚ùó–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n‚è≥–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è", reply_markup=menu_kb)
        await createBot.bot.send_message('331253781', text=createBot.database.get_info_user(call.from_user.id))
        await state.finish()
    else:
        await FsmSendResume.first()
        await call.message.answer("üìã–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –í–∞—à–µ –∏–º—è <em>—Ñ–∞–º–∏–ª–∏—è –ø–æ –∂–µ–ª–∞–Ω–∏—é</em>")
        
    return
    

def register_user_handlers(dp: Dispatcher):
    
    dp.register_message_handler(back_menu, commands=['start'], state=FsmSendResume)
    
    dp.register_message_handler(start_resume, Text(equals='üíµ–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ'))
    dp.register_message_handler(set_name, state=FsmSendResume.name)
    
    dp.register_callback_query_handler(set_age, text='none_age', state=FsmSendResume.age)
    dp.register_message_handler(set_age, state=FsmSendResume.age)
    
    dp.register_callback_query_handler(set_experience, text='none_experience', state=FsmSendResume.experience)
    dp.register_message_handler(set_experience, state=FsmSendResume.experience)
    
    dp.register_callback_query_handler(finish_state, text_contains=["finish__"], state=FsmSendResume.finish)